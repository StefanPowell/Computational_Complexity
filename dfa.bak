#lang racket
(require rackunit)
(provide (all-defined-out))

;takes an argument and returns true if it is a deterministic finite automata
(define (is-dfa x) 
	;check if has initial state
	;check if has accept state
	;check if connections correct
	'todo)
	
;takes an argument and returns true if it is an initial state
(define (is-initial-state x)
	'todo)
	
;takes an argument and returns true if it is an accept state
(define (is-accept-state x) 
	'todo)
	
;takes an argument and returns true if it is neither an initial state or accept state
(define (neither-accept-nor-initial x)
	'todo)

;takes a dfa as argument and checks if it is fully connected
(define (is-fully-connected x)
	'todo)

;takes in a value n and a list of symbols with n added
(define (create-symbols n l)
	(cond
		[(empty? l)(cons n l)]
		[else(cons n l)]
	)
)

;x takes a variable to represent that initial state
;y takes a symbol used to connect the states
;z takes a variable to represent another state to which it  

(define (create-initial-state x)
 (lambda (a b)
	(cons x (a b))
  )
)
	
(define (create-accept-state)
	'todo)
	
(define (connect-dfa)
	'todo)
